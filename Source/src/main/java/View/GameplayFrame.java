package View;


import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import javax.swing.*;
import javax.swing.BorderFactory;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.border.MatteBorder;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;

/**
 *
 * @author Karol
 */
public class GameplayFrame extends javax.swing.JFrame {

    /**
     * Creates new form GameplayFrame
     * @param userName
     * @param difficultyLevel
     */
    // Constructor to initialize the frame
    public GameplayFrame(String userName, String difficultyLevel) {
        initComponents();
        setLocationRelativeTo(null); // This will center the frame on the screen
        nameLabel.setText(userName);  // Display user name
        lavelLabel.setText(difficultyLevel);  // Display difficulty level
        setupSudokuTable();  // Set up the Sudoku grid
        
        
    }
    
   
    
// Method to initialize the Sudoku table
private void setupSudokuTable() {
    
     String[] columnHeaders = {"A", "B", "C", "D", "E", "F", "G", "H", "I"};
    // Set a 9x9 grid for Sudoku
    DefaultTableModel model = new DefaultTableModel(9, 9) {
        @Override
        public boolean isCellEditable(int row, int column) {
            return true; // Allow editing for user input
        }
    };
    model.setColumnIdentifiers(columnHeaders); // Set column headers
    sudokuTable.setModel(model);
    sudokuTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
   
     String[] rowHeaders = {"a", "b", "c", "d", "e", "f", "g", "h", "i"};
     
     JTable rowHeaderTable = new JTable(new DefaultTableModel(rowHeaders.length, 1)) {
        @Override
        public boolean isCellEditable(int row, int column) {
            return false; // Row headers should not be editable
        }
    };
     
         // Populate row header table with row titles
    for (int i = 0; i < rowHeaders.length; i++) {
        rowHeaderTable.setValueAt(rowHeaders[i], i, 0);
    }
     // Set row header properties
    rowHeaderTable.setRowHeight(67); // Match the row height of the Sudoku table
    rowHeaderTable.setPreferredScrollableViewportSize(new Dimension(20, sudokuTable.getHeight()));
    rowHeaderTable.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {
        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            JLabel label = new JLabel(String.valueOf(value), JLabel.CENTER);
            label.setFont(sudokuTable.getFont());
            label.setOpaque(true);
            //label.setBackground(Color.LIGHT_GRAY); // Background for row headers
            return label;
        }
    });
    

    // Apply a custom renderer for bold grid lines
    sudokuTable.setDefaultRenderer(Object.class, new SudokuCellRenderer());
    sudokuPanel.setRowHeaderView(rowHeaderTable);
    
 
}

// Custom Renderer for Sudoku cells
class SudokuCellRenderer extends DefaultTableCellRenderer {
    @Override
    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
        // Get the default cell renderer
        Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);

        // Ensure the cell is a JComponent for styling
        if (c instanceof JComponent) {
            JComponent jc = (JComponent) c;

            // Apply borders for bold lines in 3x3 sub-grids
            int top = (row == 3 || row == 6) ? 3 : 1; // Bold lines between row 3-4 and 6-7
            int left = (column == 3 || column == 6) ? 3 : 1; // Bold lines between column 3-4 and 6-7
            int bottom = 1;
            int right = 1;

            // Set the border for the cell
            jc.setBorder(BorderFactory.createMatteBorder(top, left, bottom, right, Color.BLACK));
        }

        // Set background and foreground colors
        if ((row / 3 + column / 3) % 2 == 0) {
            c.setBackground(Color.LIGHT_GRAY); // Alternating 3x3 sub-grid background color
        } else {
            c.setBackground(Color.WHITE);
        }
        c.setForeground(Color.BLACK);

        return c;
    }
}
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        nameMessageLabel = new javax.swing.JLabel();
        nameLabel = new javax.swing.JLabel();
        levelMessageLabel = new javax.swing.JLabel();
        lavelLabel = new javax.swing.JLabel();
        RoundMessageLabel = new javax.swing.JLabel();
        numberRoundLabel = new javax.swing.JLabel();
        sudokuPanel = new javax.swing.JScrollPane();
        sudokuTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        nameMessageLabel.setText("Name");

        nameLabel.setText("userName");

        levelMessageLabel.setText("Level:");

        lavelLabel.setText("choseLevel");

        RoundMessageLabel.setText("Round:");

        numberRoundLabel.setText("roundNo");

        sudokuPanel.setPreferredSize(new java.awt.Dimension(241, 241));

        sudokuTable.setAutoCreateRowSorter(true);
        sudokuTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "A", "B", "C", "D", "E", "F", "G", "H", "I"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        sudokuTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        sudokuTable.setAutoscrolls(false);
        sudokuTable.setEditingRow(1);
        sudokuTable.setFocusable(false);
        sudokuTable.setPreferredSize(new java.awt.Dimension(603, 603));
        sudokuTable.setRequestFocusEnabled(false);
        sudokuTable.setRowHeight(67);
        sudokuTable.setShowGrid(true);
        sudokuTable.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                sudokuTableAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        sudokuPanel.setViewportView(sudokuTable);
        if (sudokuTable.getColumnModel().getColumnCount() > 0) {
            sudokuTable.getColumnModel().getColumn(0).setResizable(false);
            sudokuTable.getColumnModel().getColumn(1).setResizable(false);
            sudokuTable.getColumnModel().getColumn(2).setResizable(false);
            sudokuTable.getColumnModel().getColumn(3).setResizable(false);
            sudokuTable.getColumnModel().getColumn(4).setResizable(false);
            sudokuTable.getColumnModel().getColumn(5).setResizable(false);
            sudokuTable.getColumnModel().getColumn(6).setResizable(false);
            sudokuTable.getColumnModel().getColumn(7).setResizable(false);
            sudokuTable.getColumnModel().getColumn(8).setResizable(false);
        }

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(nameMessageLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(nameLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 89, Short.MAX_VALUE)
                        .addComponent(RoundMessageLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(numberRoundLabel)
                        .addGap(5, 5, 5))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(levelMessageLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lavelLabel)
                        .addGap(0, 0, Short.MAX_VALUE))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(sudokuPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameMessageLabel)
                    .addComponent(nameLabel)
                    .addComponent(RoundMessageLabel)
                    .addComponent(numberRoundLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(levelMessageLabel)
                    .addComponent(lavelLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sudokuPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void sudokuTableAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_sudokuTableAncestorAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_sudokuTableAncestorAdded

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel RoundMessageLabel;
    private javax.swing.JLabel lavelLabel;
    private javax.swing.JLabel levelMessageLabel;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JLabel nameMessageLabel;
    private javax.swing.JLabel numberRoundLabel;
    private javax.swing.JScrollPane sudokuPanel;
    private javax.swing.JTable sudokuTable;
    // End of variables declaration//GEN-END:variables
}
