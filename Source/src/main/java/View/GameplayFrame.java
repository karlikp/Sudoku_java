package View;



import Controller.GameController;
import java.awt.Component;
import java.awt.Dimension;
import javax.swing.*;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Karol
 */


public class GameplayFrame extends javax.swing.JFrame {
    
    private GameController controller;


    /**
     * Creates new form GameplayFrame
     */
    // Constructor to initialize the frame
        public GameplayFrame() {
        initComponents();
        setupSudokuTable();
        setLocationRelativeTo(null);
        setTitle("Sudoku");
        setupSudokuTable();  // Set up the Sudoku grid
}
   
        
// Method to initialize the Sudoku table
private void setupSudokuTable() {
    
    nameLabel.setText(controller.getName());
    levelLabel.setText(controller.getLevel());
    // Set a 9x9 grid for Sudoku
    DefaultTableModel model = new DefaultTableModel(9, 9) {
        @Override
    public Class<?> getColumnClass(int columnIndex) {
        return Integer.class; // Only integers allowed
        }
    };
    
    
   
    sudokuTable.setModel(model);
 
        // Identyfikatory wierszy
    String[] rowHeaders = {"a", "b", "c", "d", "e", "f", "g", "h", "i"};

    // Tworzenie rowHeaderTable
    JTable rowHeaderTable = new JTable(new DefaultTableModel(rowHeaders.length, 1)) {
        @Override
        public boolean isCellEditable(int row, int column) {
            return false; // Nagłówki nieedytowalne
        }
    };

    // Wypełnianie rowHeaderTable nazwami wierszy
    for (int i = 0; i < rowHeaders.length; i++) {
        rowHeaderTable.setValueAt(rowHeaders[i], i, 0);
    }

    // Ustawienia wizualne rowHeaderTable
    rowHeaderTable.setRowHeight(67); // Dopasowanie wysokości wierszy
    rowHeaderTable.setPreferredScrollableViewportSize(new Dimension(30, sudokuTable.getHeight()));
    rowHeaderTable.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {
        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            JLabel label = new JLabel(String.valueOf(value), JLabel.CENTER);
            label.setFont(sudokuTable.getFont());
            label.setOpaque(true);
            return label;
        }
    });

    // Dodanie rowHeaderTable do sudokuPanel jako widok boczny
    sudokuPanel.setRowHeaderView(rowHeaderTable);

    // Środkowanie wartości w sudokuTable
    DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
    centerRenderer.setHorizontalAlignment(SwingConstants.CENTER);
    sudokuTable.setDefaultRenderer(Object.class, centerRenderer);
    
    // Dodanie nasłuchiwacza na zmiany w modelu tabeli
    sudokuTable.getModel().addTableModelListener(e -> {
                int row = e.getFirstRow();
                int col = e.getColumn();
                Object value = sudokuTable.getValueAt(row, col);

                if (value != null) {
                    try {
                        int num = Integer.parseInt(value.toString());
                        if (num >= 1 && num <= 9) {
                            if (controller != null) {
                                controller.handleUserMove(row, col, num);
                            } else {
                                System.out.println("Kontroler nie został przypisany.");
}
                        } else {
                             new MessageFrame("Invalid input. Only numbers between 1 and 9 are allowed.");
                        }
                    } catch (NumberFormatException ex) {
                         new MessageFrame("Invalid input. Please enter a valid number.");
                    }
                }
            });
        }

     public void updateBoard(int[][] board) {
        // Update the table based on the new state of the Sudoku board
        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                sudokuTable.setValueAt(board[i][j], i, j);
            }
        }
    }
     
     // Setter for the controller
    public void setController(GameController controller) {
        this.controller = controller;
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        nameMessageLabel = new javax.swing.JLabel();
        nameLabel = new javax.swing.JLabel();
        levelMessageLabel = new javax.swing.JLabel();
        levelLabel = new javax.swing.JLabel();
        RoundMessageLabel = new javax.swing.JLabel();
        numberRoundLabel = new javax.swing.JLabel();
        sudokuPanel = new javax.swing.JScrollPane();
        sudokuTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        nameMessageLabel.setText("Name");

        nameLabel.setText("userName");

        levelMessageLabel.setText("Level:");

        levelLabel.setText("choseLevel");

        RoundMessageLabel.setText("Round:");

        numberRoundLabel.setText("roundNo");

        sudokuPanel.setPreferredSize(new java.awt.Dimension(241, 241));

        sudokuTable.setAutoCreateRowSorter(true);
        sudokuTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "A", "B", "C", "D", "E", "F", "G", "H", "I"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        sudokuTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        sudokuTable.setAutoscrolls(false);
        sudokuTable.setEditingRow(1);
        sudokuTable.setFocusable(false);
        sudokuTable.setPreferredSize(new java.awt.Dimension(603, 603));
        sudokuTable.setRequestFocusEnabled(false);
        sudokuTable.setRowHeight(67);
        sudokuTable.setShowGrid(true);
        sudokuPanel.setViewportView(sudokuTable);
        if (sudokuTable.getColumnModel().getColumnCount() > 0) {
            sudokuTable.getColumnModel().getColumn(0).setResizable(false);
            sudokuTable.getColumnModel().getColumn(1).setResizable(false);
            sudokuTable.getColumnModel().getColumn(2).setResizable(false);
            sudokuTable.getColumnModel().getColumn(3).setResizable(false);
            sudokuTable.getColumnModel().getColumn(4).setResizable(false);
            sudokuTable.getColumnModel().getColumn(5).setResizable(false);
            sudokuTable.getColumnModel().getColumn(6).setResizable(false);
            sudokuTable.getColumnModel().getColumn(7).setResizable(false);
            sudokuTable.getColumnModel().getColumn(8).setResizable(false);
        }

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(nameMessageLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(nameLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 89, Short.MAX_VALUE)
                        .addComponent(RoundMessageLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(numberRoundLabel)
                        .addGap(5, 5, 5))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(levelMessageLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(levelLabel)
                        .addGap(0, 0, Short.MAX_VALUE))))
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(sudokuPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameMessageLabel)
                    .addComponent(nameLabel)
                    .addComponent(RoundMessageLabel)
                    .addComponent(numberRoundLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(levelMessageLabel)
                    .addComponent(levelLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sudokuPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel RoundMessageLabel;
    private javax.swing.JLabel levelLabel;
    private javax.swing.JLabel levelMessageLabel;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JLabel nameMessageLabel;
    private javax.swing.JLabel numberRoundLabel;
    private javax.swing.JScrollPane sudokuPanel;
    private javax.swing.JTable sudokuTable;
    // End of variables declaration//GEN-END:variables
}
